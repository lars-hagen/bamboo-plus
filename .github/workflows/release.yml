name: Release

on:
  push:
    branches: [ main, dev ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    uses: ./.github/workflows/test.yml

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    # Only run release job on actual pushes, not PR events
    if: github.event_name == 'push'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine version and build
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get next version without creating commits
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # For main branch - get semantic version
            VERSION=$(npx semantic-release --dry-run | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' || echo "0.0.1")
          else
            # For dev branch - use timestamp-based version
            BASE_VERSION=$(npx semantic-release --dry-run | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' || echo "0.0.1")
            TIMESTAMP=$(date +%Y%m%d.%H%M%S)
            COMMIT_HASH=$(git rev-parse --short HEAD)
            VERSION="${BASE_VERSION}-dev.${TIMESTAMP}.${COMMIT_HASH}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Build with determined version
          ./build.sh ${GITHUB_REF##*/} $VERSION

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.release.outputs.version }}
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Create regular release for main branch
            gh release create v$VERSION bamboo-plus-*.zip \
              --title "v$VERSION" \
              --generate-notes
          else
            # Create prerelease for dev branch
            gh release create v$VERSION bamboo-plus-*.zip \
              --prerelease \
              --title "Development Build v$VERSION" \
              --notes "This is a development build from the dev branch. Use at your own risk."
          fi 